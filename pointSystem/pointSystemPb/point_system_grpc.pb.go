// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pointSystemPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PointSystemClient is the client API for PointSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointSystemClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	GetPoints(ctx context.Context, in *GetPointsRequest, opts ...grpc.CallOption) (*GetPointsResponse, error)
	AddActivity(ctx context.Context, in *AddActivityRequest, opts ...grpc.CallOption) (*AddActivityResponse, error)
	SendPoints(ctx context.Context, in *SendPointsRequest, opts ...grpc.CallOption) (*SendPointsResponse, error)
	SpendPoints(ctx context.Context, in *SpendPointsRequest, opts ...grpc.CallOption) (*SpendPointsResponse, error)
}

type pointSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewPointSystemClient(cc grpc.ClientConnInterface) PointSystemClient {
	return &pointSystemClient{cc}
}

func (c *pointSystemClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/aseel.PointSystem/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointSystemClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/aseel.PointSystem/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointSystemClient) GetPoints(ctx context.Context, in *GetPointsRequest, opts ...grpc.CallOption) (*GetPointsResponse, error) {
	out := new(GetPointsResponse)
	err := c.cc.Invoke(ctx, "/aseel.PointSystem/GetPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointSystemClient) AddActivity(ctx context.Context, in *AddActivityRequest, opts ...grpc.CallOption) (*AddActivityResponse, error) {
	out := new(AddActivityResponse)
	err := c.cc.Invoke(ctx, "/aseel.PointSystem/AddActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointSystemClient) SendPoints(ctx context.Context, in *SendPointsRequest, opts ...grpc.CallOption) (*SendPointsResponse, error) {
	out := new(SendPointsResponse)
	err := c.cc.Invoke(ctx, "/aseel.PointSystem/SendPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointSystemClient) SpendPoints(ctx context.Context, in *SpendPointsRequest, opts ...grpc.CallOption) (*SpendPointsResponse, error) {
	out := new(SpendPointsResponse)
	err := c.cc.Invoke(ctx, "/aseel.PointSystem/SpendPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointSystemServer is the server API for PointSystem service.
// All implementations should embed UnimplementedPointSystemServer
// for forward compatibility
type PointSystemServer interface {
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	GetPoints(context.Context, *GetPointsRequest) (*GetPointsResponse, error)
	AddActivity(context.Context, *AddActivityRequest) (*AddActivityResponse, error)
	SendPoints(context.Context, *SendPointsRequest) (*SendPointsResponse, error)
	SpendPoints(context.Context, *SpendPointsRequest) (*SpendPointsResponse, error)
}

// UnimplementedPointSystemServer should be embedded to have forward compatible implementations.
type UnimplementedPointSystemServer struct {
}

func (UnimplementedPointSystemServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedPointSystemServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedPointSystemServer) GetPoints(context.Context, *GetPointsRequest) (*GetPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoints not implemented")
}
func (UnimplementedPointSystemServer) AddActivity(context.Context, *AddActivityRequest) (*AddActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddActivity not implemented")
}
func (UnimplementedPointSystemServer) SendPoints(context.Context, *SendPointsRequest) (*SendPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPoints not implemented")
}
func (UnimplementedPointSystemServer) SpendPoints(context.Context, *SpendPointsRequest) (*SpendPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpendPoints not implemented")
}

// UnsafePointSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointSystemServer will
// result in compilation errors.
type UnsafePointSystemServer interface {
	mustEmbedUnimplementedPointSystemServer()
}

func RegisterPointSystemServer(s grpc.ServiceRegistrar, srv PointSystemServer) {
	s.RegisterService(&PointSystem_ServiceDesc, srv)
}

func _PointSystem_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointSystemServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aseel.PointSystem/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointSystemServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointSystem_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointSystemServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aseel.PointSystem/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointSystemServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointSystem_GetPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointSystemServer).GetPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aseel.PointSystem/GetPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointSystemServer).GetPoints(ctx, req.(*GetPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointSystem_AddActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointSystemServer).AddActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aseel.PointSystem/AddActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointSystemServer).AddActivity(ctx, req.(*AddActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointSystem_SendPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointSystemServer).SendPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aseel.PointSystem/SendPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointSystemServer).SendPoints(ctx, req.(*SendPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointSystem_SpendPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointSystemServer).SpendPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aseel.PointSystem/SpendPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointSystemServer).SpendPoints(ctx, req.(*SpendPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PointSystem_ServiceDesc is the grpc.ServiceDesc for PointSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PointSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aseel.PointSystem",
	HandlerType: (*PointSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _PointSystem_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _PointSystem_SignIn_Handler,
		},
		{
			MethodName: "GetPoints",
			Handler:    _PointSystem_GetPoints_Handler,
		},
		{
			MethodName: "AddActivity",
			Handler:    _PointSystem_AddActivity_Handler,
		},
		{
			MethodName: "SendPoints",
			Handler:    _PointSystem_SendPoints_Handler,
		},
		{
			MethodName: "SpendPoints",
			Handler:    _PointSystem_SpendPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pointSystem/pointSystemPb/point_system.proto",
}
